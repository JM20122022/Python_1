#1. Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type()
# для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

a = [i for i in range (10)]
print(a)
print(type(a))
b = [str(i) for i in a]
print(b)
print(type(b))


#2. Для списка реализовать обмен значений соседних элементов.
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д. При нечётном количестве
# элементов последний сохранить на своём месте.
# Для заполнения списка элементов нужно использовать функцию input().

a = list(input('random list '))
j = 0
print(a[j+1])
a_new = []
for i in range (len(a)-1):
    a[j], a[j+1] = a[j+1], a[j]
    j = j+2
    if j > (len(a)-2):
        break
print(a)



#3. Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить, к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и dict.

month = int(input('Enter a month  number '))
list = ['winter', 'spring', 'summer', 'autumn']
if month > 2 and month < 6:
    print(list[1])
if month > 5 and month < 9:
        print(list[2])
if month > 8 and month < 12:
        print(list[3])
if month > 11 or month < 3:
        print(list[0])




#or



month = str(input('Enter a month  number '))
list = ['winter', 'spring', 'summer', 'autumn']
seasons = {
    '1': list[0],
    '2': list[0],
    '3': list[1],
    '4': list[1],
    '5': list[1],
    '6': list[2],
    '7': list[2],
    '8': list[2],
    '9': list[3],
    '10': list[3],
    '11': list[3],
    '12': list[0]
}
result = f'It is {seasons[month]} now '
print(result)



#4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки.
# Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.

info = input('Enter something ')
info_2 = info.split()
info_3 =[]
for el in info_2:
    info_3.append(el[:10])
for ind, el in enumerate(info_3, start = 1):
    print(ind, el)



#5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел,
# который не возрастает. У пользователя нужно запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент
# с тем же значением должен разместиться после них.
#Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
#Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
#Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
#Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
#Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].

my_list = [7, 5, 3, 3, 2]
num = int(input('Enter a number '))
index = my_list.index(num)
my_list.insert(index, num)
print(my_list)



