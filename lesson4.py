#############################################################################################################
#1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
# Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.
#############################################################################################################
from sys import argv

def salary(output, h_rate, bonus):
    print((output*h_rate)+bonus)

main, output, h_rate, bonus = argv

salary(float(output), float(h_rate), float(bonus))

print("File name: ", main)
print("Param 1: ", output)
print("Param 2: ", h_rate)
print("Param 3: ", bonus)


#############################################################################################################
#2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
#Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
#Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
#Результат: [12, 44, 4, 10, 78, 123].
#############################################################################################################

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = []
for i in range(len(my_list)-1):
    if my_list[i+1] > my_list[i]:
        new_list.append(my_list[i+1])
print(f"Исходный список: {my_list}")
print(f"Новый список: {new_list}")



#############################################################################################################
#3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
#Подсказка: используйте функцию range() и генератор.
#############################################################################################################

r = [x for x in range(20, 240) if x % 20 == 0 or x % 21 == 0]
print(r)


#############################################################################################################
#4 Представлен список чисел. Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке.
# Для выполнения задания обязательно используйте генератор.
#Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
#Результат: [23, 1, 3, 10, 4, 11]
#############################################################################################################


list1 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
list2 = [i for i in list1 if list1.count(i) == 1]
print(list2)



#############################################################################################################
#5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().
#############################################################################################################

from functools import reduce

items = [x for x in range(100, 1001) if x % 2 == 0]
mult_all = reduce(lambda x, y: x * y, items)

print(mult_all)



#############################################################################################################
#6. Реализовать два небольших скрипта:
#итератор, генерирующий целые числа, начиная с указанного;
#итератор, повторяющий элементы некоторого списка, определённого заранее.
#Подсказка: используйте функцию count() и cycle() модуля itertools.
#Обратите внимание, что создаваемый цикл не должен быть бесконечным.
#Предусмотрите условие его завершения.
#### Например, в первом задании выводим целые числа, начиная с 3.
# При достижении числа 10 — завершаем цикл.
# Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.
#############################################################################################################

from itertools import count
for el in count(3):
    if el > 10:
        break
    else:
        print(el)



from itertools import cycle
с = 0
for el in cycle("HAPPY"):
    if с > 10:
        break
    print(el)
    с += 1


#############################################################################################################
#7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Ф
# ункция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
#############################################################################################################
def fact(n):
    result = 1
    for i in range(1, n + 1):
        result = result * i
        yield result


n = 10
for i in fact(n):
    print(i)
